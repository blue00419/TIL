객체 지향 언어란?
데이터를 객체로 취급하여 프로그램에 반영한 것으로 
객체와 객체의 상호작용을 통해 프로그램이 동작한다.

특징
- 상속을 통한 장점 극대화
- 코드의 재사용성이 높다.
- 코드의 변경이 용이하다.
- 직관적인 코드분석
- 개발속도 향상

추상화
객체들의 공통적인 특징(속성과 기능)을 뽑아내는 것
사람(parent)
나(child), 형(child)
나와 형은 같은 사람에 속하고 공부하고, 게임하는건 같지만 
공부하는 분야도 다르고 게임의 종류도 다르다.
구체적인 내용은 클래스에서 오버라이딩하여 사용한다.


캡슐화
자세한 내부 구현은 숨기고 외부에는 기능만을 제공한다.
야무지게 캡슐화를 하면 요구사항이 추가될 시 
추가되거나 변경되는 코드가 줄어들어 유지 보수성이 높아진다.
(https://javacan.tistory.com/entry/EncapsulationExcerprtFromJavaBook)

상속
자식 클래스가 부모 클래스의 맴버를 물려받는다.
부모 클래스에서 이미 사용중인 코드를 재사용 할 수 있어서
반복되는 코드를 줄여주고 유지 보수가 편리하다.
클래스와 추상 클래스는 extends를 이용
interface는 implements를 이용하여 상속한다.
interface는 다중 상속이 가능.

다형성
같은 자료형에 여러가지 객체를 대입하여 다양한 결과를 얻어내는 성질
부모 타입에는 모든 자식 객체가 대입될 수 있다.
(Pet cat = new Cat();)
코드를 간결하게 할 뿐 아니라 변화에도 유연하게 대처할 수 있게 한다.

추상 클래스(abstract class)와 interface 공통점
- 추상 클래스와 인터페이스는 선언만 있고 구현 내용이 없는 클래스.
- 추상 클래스나 인터페이스는 새로운 인스턴스를 생성할 수 없다.
- 이를 상속받은 자식 클래스만이 객체를 생성할 수 있다.

추상 클래스(abstract class)와 interface 차이점
- 추상 클래스
추상 메서드가 없어도 무방하다.
추상 메서드가 있다면 자식 클래스에서 반드시 재정의 해야한다.
공통적인 기능을 하는 객체들의 추상화*
여러 클래스의 공통점을 찾아 추상화시켜서 사용하는 것이 개발에 이득이 될 때 사용된다.
- 인터페이스
다중 상속이 된다는게 가장 큰 특징같다.
자식 클래스에서 부모 클래스의 메서드가 반드시 존재하도록 강제한다.
